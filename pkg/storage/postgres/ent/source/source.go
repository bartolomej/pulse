// Code generated by ent, DO NOT EDIT.

package source

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the source type in the database.
	Label = "source"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldConfigJSON holds the string denoting the config_json field in the database.
	FieldConfigJSON = "config_json"
	// Table holds the table name of the source in the database.
	Table = "sources"
)

// Columns holds all SQL columns for source fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldURL,
	FieldType,
	FieldConfigJSON,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Source queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByConfigJSON orders the results by the config_json field.
func ByConfigJSON(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigJSON, opts...).ToFunc()
}
