// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/glanceapp/glance/pkg/storage/postgres/ent/activity"
	pgvector "github.com/pgvector/pgvector-go"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (ac *ActivityCreate) SetUID(s string) *ActivityCreate {
	ac.mutation.SetUID(s)
	return ac
}

// SetSourceUID sets the "source_uid" field.
func (ac *ActivityCreate) SetSourceUID(s string) *ActivityCreate {
	ac.mutation.SetSourceUID(s)
	return ac
}

// SetSourceType sets the "source_type" field.
func (ac *ActivityCreate) SetSourceType(s string) *ActivityCreate {
	ac.mutation.SetSourceType(s)
	return ac
}

// SetTitle sets the "title" field.
func (ac *ActivityCreate) SetTitle(s string) *ActivityCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetBody sets the "body" field.
func (ac *ActivityCreate) SetBody(s string) *ActivityCreate {
	ac.mutation.SetBody(s)
	return ac
}

// SetURL sets the "url" field.
func (ac *ActivityCreate) SetURL(s string) *ActivityCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetImageURL sets the "image_url" field.
func (ac *ActivityCreate) SetImageURL(s string) *ActivityCreate {
	ac.mutation.SetImageURL(s)
	return ac
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActivityCreate) SetCreatedAt(t time.Time) *ActivityCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetShortSummary sets the "short_summary" field.
func (ac *ActivityCreate) SetShortSummary(s string) *ActivityCreate {
	ac.mutation.SetShortSummary(s)
	return ac
}

// SetFullSummary sets the "full_summary" field.
func (ac *ActivityCreate) SetFullSummary(s string) *ActivityCreate {
	ac.mutation.SetFullSummary(s)
	return ac
}

// SetRawJSON sets the "raw_json" field.
func (ac *ActivityCreate) SetRawJSON(s string) *ActivityCreate {
	ac.mutation.SetRawJSON(s)
	return ac
}

// SetEmbedding sets the "embedding" field.
func (ac *ActivityCreate) SetEmbedding(pg pgvector.Vector) *ActivityCreate {
	ac.mutation.SetEmbedding(pg)
	return ac
}

// SetNillableEmbedding sets the "embedding" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableEmbedding(pg *pgvector.Vector) *ActivityCreate {
	if pg != nil {
		ac.SetEmbedding(*pg)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ActivityCreate) SetID(s string) *ActivityCreate {
	ac.mutation.SetID(s)
	return ac
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Activity.uid"`)}
	}
	if _, ok := ac.mutation.SourceUID(); !ok {
		return &ValidationError{Name: "source_uid", err: errors.New(`ent: missing required field "Activity.source_uid"`)}
	}
	if _, ok := ac.mutation.SourceType(); !ok {
		return &ValidationError{Name: "source_type", err: errors.New(`ent: missing required field "Activity.source_type"`)}
	}
	if _, ok := ac.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Activity.title"`)}
	}
	if _, ok := ac.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "Activity.body"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Activity.url"`)}
	}
	if _, ok := ac.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Activity.image_url"`)}
	}
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Activity.created_at"`)}
	}
	if _, ok := ac.mutation.ShortSummary(); !ok {
		return &ValidationError{Name: "short_summary", err: errors.New(`ent: missing required field "Activity.short_summary"`)}
	}
	if _, ok := ac.mutation.FullSummary(); !ok {
		return &ValidationError{Name: "full_summary", err: errors.New(`ent: missing required field "Activity.full_summary"`)}
	}
	if _, ok := ac.mutation.RawJSON(); !ok {
		return &ValidationError{Name: "raw_json", err: errors.New(`ent: missing required field "Activity.raw_json"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Activity.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeString))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.UID(); ok {
		_spec.SetField(activity.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := ac.mutation.SourceUID(); ok {
		_spec.SetField(activity.FieldSourceUID, field.TypeString, value)
		_node.SourceUID = value
	}
	if value, ok := ac.mutation.SourceType(); ok {
		_spec.SetField(activity.FieldSourceType, field.TypeString, value)
		_node.SourceType = value
	}
	if value, ok := ac.mutation.Title(); ok {
		_spec.SetField(activity.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ac.mutation.Body(); ok {
		_spec.SetField(activity.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.SetField(activity.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ac.mutation.ImageURL(); ok {
		_spec.SetField(activity.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(activity.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.ShortSummary(); ok {
		_spec.SetField(activity.FieldShortSummary, field.TypeString, value)
		_node.ShortSummary = value
	}
	if value, ok := ac.mutation.FullSummary(); ok {
		_spec.SetField(activity.FieldFullSummary, field.TypeString, value)
		_node.FullSummary = value
	}
	if value, ok := ac.mutation.RawJSON(); ok {
		_spec.SetField(activity.FieldRawJSON, field.TypeString, value)
		_node.RawJSON = value
	}
	if value, ok := ac.mutation.Embedding(); ok {
		_spec.SetField(activity.FieldEmbedding, field.TypeOther, value)
		_node.Embedding = &value
	}
	return _node, _spec
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
